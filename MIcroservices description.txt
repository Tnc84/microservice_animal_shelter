
Port:


SHELTER-MICROSERVICE IS THE NAME REGISTRED ON THE EUREKA SERVER 
eureka server: localhost:8761

api-gateway 8765

ion api-gateway must be set spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true

http://localhost:8765/shelter-microservice/shelters/getAllAnimals
http://localhost:8765/animal-microservice/animals/getAll

shelter 8092 / 8094
localhost:8092/getAlAnimals -for getting all animals
localhost:8092/getAll -for get all shelters

animal 8093 / 8095
http://localhost:8093/animals/getAll


On VM option: -Dserver.port=9090

in children micro services
@EnableFeignClients in main class
must put eureka server dependency:
 spring-cloud-starter-netflix-eureka-client in pom.xml

spring:
  application:
    name: animal-microservice

eureka:
  client:
    serviceUrl:
      defaultZone=http: //localhost:8761/eureka


Docker - repository

-must create a docker image / registries
*image is like a class, and the container is like an object(must set the port ex 5000:5000)
*container is the running version of image

Zipkin URL
http://localhost:9411/zipkin

Lounch Zipkin
Running via Docker:
docker run -d -p 9411:9411 openzipkin/zipkin-slim

dependencies for docker/sleuth

<!--        ////////Docker configuration-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-sleuth</artifactId>
            <version>3.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-sleuth-zipkin</artifactId>
            <version>3.1.3</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
        </dependency>
<!--        ////////Docker configuration-->

IMAGES 
Shelter image :   tnc1984/shms-shelter:0.0.1-SNAPSHOT-


in application.yml 
spring:
  sleuth:
    sampler:
      probability: 1.0

   @GetMapping("/getAnimalByIdFeign/{id}")
    public FeignAnimalProxy getAnimalById() {
        return feignAnimalProxy;
    }


 @GetMapping("/animals/getById/{id}")
    AnimalDTO getAnimalById();

